<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Event', 'doctrine');

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $industry
 * @property string $mentorid
 * @property string $capacity
 * @property string $booked
 * @property timestamp $datetime
 * @property string $neighborhood
 * @property string $address
 * @property string $status
 * @property timestamp $created_at
 * @property timestamp $udpated_at
 * @property YocaIndustry $YocaIndustry
 * @property Doctrine_Collection $Registration
 * 
 * @method integer             getId()           Returns the current record's "id" value
 * @method integer             getIndustry()     Returns the current record's "industry" value
 * @method string              getMentorid()     Returns the current record's "mentorid" value
 * @method string              getCapacity()     Returns the current record's "capacity" value
 * @method string              getBooked()       Returns the current record's "booked" value
 * @method timestamp           getDatetime()     Returns the current record's "datetime" value
 * @method string              getNeighborhood() Returns the current record's "neighborhood" value
 * @method string              getAddress()      Returns the current record's "address" value
 * @method string              getStatus()       Returns the current record's "status" value
 * @method timestamp           getCreatedAt()    Returns the current record's "created_at" value
 * @method timestamp           getUdpatedAt()    Returns the current record's "udpated_at" value
 * @method YocaIndustry        getYocaIndustry() Returns the current record's "YocaIndustry" value
 * @method Doctrine_Collection getRegistration() Returns the current record's "Registration" collection
 * @method Event               setId()           Sets the current record's "id" value
 * @method Event               setIndustry()     Sets the current record's "industry" value
 * @method Event               setMentorid()     Sets the current record's "mentorid" value
 * @method Event               setCapacity()     Sets the current record's "capacity" value
 * @method Event               setBooked()       Sets the current record's "booked" value
 * @method Event               setDatetime()     Sets the current record's "datetime" value
 * @method Event               setNeighborhood() Sets the current record's "neighborhood" value
 * @method Event               setAddress()      Sets the current record's "address" value
 * @method Event               setStatus()       Sets the current record's "status" value
 * @method Event               setCreatedAt()    Sets the current record's "created_at" value
 * @method Event               setUdpatedAt()    Sets the current record's "udpated_at" value
 * @method Event               setYocaIndustry() Sets the current record's "YocaIndustry" value
 * @method Event               setRegistration() Sets the current record's "Registration" collection
 * 
 * @package    yoca
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('industry', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('mentorid', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('capacity', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('booked', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('datetime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('neighborhood', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('address', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('status', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('udpated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('YocaIndustry', array(
             'local' => 'industry',
             'foreign' => 'id'));

        $this->hasMany('Registration', array(
             'local' => 'id',
             'foreign' => 'event_id'));
    }
}